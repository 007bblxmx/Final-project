// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calculateMaxCosineSimilarity
List calculateMaxCosineSimilarity(CharacterVector query, ListOf<CharacterVector> wordLists);
RcppExport SEXP _calculateCosineSimilarity_calculateMaxCosineSimilarity(SEXP querySEXP, SEXP wordListsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type query(querySEXP);
    Rcpp::traits::input_parameter< ListOf<CharacterVector> >::type wordLists(wordListsSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateMaxCosineSimilarity(query, wordLists));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP calculateMaxCosineSimilarity(void *, void *);

static const R_CallMethodDef CallEntries[] = {
    {"_calculateCosineSimilarity_calculateMaxCosineSimilarity", (DL_FUNC) &_calculateCosineSimilarity_calculateMaxCosineSimilarity, 2},
    {"calculateMaxCosineSimilarity", (DL_FUNC) &calculateMaxCosineSimilarity, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_calculateCosineSimilarity(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
